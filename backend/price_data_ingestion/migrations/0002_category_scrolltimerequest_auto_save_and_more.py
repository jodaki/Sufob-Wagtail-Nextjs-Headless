# Generated by Django 4.2.11 on 2025-08-08 22:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('price_data_ingestion', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(verbose_name='مقدار (API Value)')),
                ('name', models.CharField(max_length=100, verbose_name='نام گروه')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('order', models.IntegerField(default=0, verbose_name='ترتیب نمایش')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
            ],
            options={
                'verbose_name': 'گروه',
                'verbose_name_plural': 'گروه\u200cها',
                'ordering': ['main_category', 'order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='scrolltimerequest',
            name='auto_save',
            field=models.BooleanField(default=False, verbose_name='ذخیره خودکار در پایگاه داده'),
        ),
        migrations.AddField(
            model_name='scrolltimerequest',
            name='duplicate_handling',
            field=models.CharField(choices=[('skip', 'رد کردن رکوردهای تکراری'), ('replace', 'جایگزینی رکوردهای تکراری'), ('update', 'بروزرسانی رکوردهای موجود')], default='skip', max_length=20, verbose_name='نحوه مواجهه با داده\u200cهای تکراری'),
        ),
        migrations.AddField(
            model_name='scrolltimerequest',
            name='processed_records',
            field=models.PositiveIntegerField(default=0, verbose_name='تعداد رکوردهای پردازش شده'),
        ),
        migrations.AddField(
            model_name='scrolltimerequest',
            name='response_data',
            field=models.JSONField(blank=True, null=True, verbose_name='داده\u200cهای پاسخ'),
        ),
        migrations.AlterField(
            model_name='scrolltimerequest',
            name='end_date_gregorian',
            field=models.DateField(blank=True, null=True, verbose_name='تاریخ پایان (میلادی)'),
        ),
        migrations.AlterField(
            model_name='scrolltimerequest',
            name='start_date_gregorian',
            field=models.DateField(blank=True, null=True, verbose_name='تاریخ شروع (میلادی)'),
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(verbose_name='مقدار (API Value)')),
                ('name', models.CharField(max_length=100, verbose_name='نام زیرگروه')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('order', models.IntegerField(default=0, verbose_name='ترتیب نمایش')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='price_data_ingestion.category', verbose_name='گروه')),
            ],
            options={
                'verbose_name': 'زیرگروه',
                'verbose_name_plural': 'زیرگروه\u200cها',
                'ordering': ['category', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MainCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(unique=True, verbose_name='مقدار (API Value)')),
                ('name', models.CharField(max_length=100, verbose_name='نام گروه اصلی')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('order', models.IntegerField(default=0, verbose_name='ترتیب نمایش')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
            ],
            options={
                'verbose_name': 'گروه اصلی',
                'verbose_name_plural': 'گروه\u200cهای اصلی',
                'ordering': ['order', 'name'],
                'indexes': [models.Index(fields=['value'], name='price_data__value_d6efd7_idx')],
            },
        ),
        migrations.AddField(
            model_name='category',
            name='main_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='price_data_ingestion.maincategory', verbose_name='گروه اصلی'),
        ),
        migrations.AlterField(
            model_name='scrolltimerequest',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='price_data_ingestion.category', verbose_name='دسته'),
        ),
        migrations.AlterField(
            model_name='scrolltimerequest',
            name='main_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='price_data_ingestion.maincategory', verbose_name='دسته اصلی'),
        ),
        migrations.AlterField(
            model_name='scrolltimerequest',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='price_data_ingestion.subcategory', verbose_name='زیردسته'),
        ),
        migrations.AddIndex(
            model_name='subcategory',
            index=models.Index(fields=['category', 'value'], name='price_data__categor_45b11d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='subcategory',
            unique_together={('category', 'value')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['main_category', 'value'], name='price_data__main_ca_238e7e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('main_category', 'value')},
        ),
    ]
